/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AverageGameModule_AverageGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "betAmount"
      | "closeBettingRound"
      | "collateralAmount"
      | "endGame"
      | "factory"
      | "gameFee"
      | "getBalance"
      | "getPlayerRevealedState"
      | "getPlayers"
      | "getPotentialWinners"
      | "id"
      | "initGame"
      | "joinGame"
      | "maxGuess"
      | "maxPlayers"
      | "minGuess"
      | "name"
      | "potentialWinners"
      | "revealGuess"
      | "startBettingRound"
      | "state"
      | "totalBetAmount"
      | "totalCollateralAmount"
      | "totalPlayers"
      | "winner"
      | "withdrawGameFees"
      | "withdrawPricepool"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BettingRoundClosed"
      | "CollateralDeposited"
      | "FeeCollected"
      | "GameCreated"
      | "GameEnded"
      | "GameStarted"
      | "PlayerJoined"
      | "PlayerRefunded"
      | "PlayerRevealedGuess"
      | "PrizeAwarded"
      | "WinnerSelected"
  ): EventFragment;

  encodeFunctionData(functionFragment: "betAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeBettingRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerRevealedState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentialWinners",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initGame",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "joinGame", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "maxGuess", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minGuess", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "potentialWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealGuess",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "startBettingRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawGameFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPricepool",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "betAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeBettingRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerRevealedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPotentialWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxGuess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minGuess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "potentialWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startBettingRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGameFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPricepool",
    data: BytesLike
  ): Result;
}

export namespace BettingRoundClosedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDepositedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeCollectedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [gameId: BigNumberish];
  export type OutputTuple = [gameId: bigint];
  export interface OutputObject {
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [
    player: AddressLike,
    totalPlayersAmount: BigNumberish
  ];
  export type OutputTuple = [player: string, totalPlayersAmount: bigint];
  export interface OutputObject {
    player: string;
    totalPlayersAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRefundedEvent {
  export type InputTuple = [player: AddressLike, amount: BigNumberish];
  export type OutputTuple = [player: string, amount: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerRevealedGuessEvent {
  export type InputTuple = [
    player: AddressLike,
    guess: BigNumberish,
    salt: string,
    revealState: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    guess: bigint,
    salt: string,
    revealState: bigint
  ];
  export interface OutputObject {
    player: string;
    guess: bigint;
    salt: string;
    revealState: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeAwardedEvent {
  export type InputTuple = [
    player: AddressLike,
    amount: BigNumberish,
    guess: BigNumberish
  ];
  export type OutputTuple = [player: string, amount: bigint, guess: bigint];
  export interface OutputObject {
    player: string;
    amount: bigint;
    guess: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerSelectedEvent {
  export type InputTuple = [winner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [winner: string, amount: bigint];
  export interface OutputObject {
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AverageGameModule_AverageGame extends BaseContract {
  connect(runner?: ContractRunner | null): AverageGameModule_AverageGame;
  waitForDeployment(): Promise<this>;

  interface: AverageGameModule_AverageGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  betAmount: TypedContractMethod<[], [bigint], "view">;

  closeBettingRound: TypedContractMethod<[], [void], "nonpayable">;

  collateralAmount: TypedContractMethod<[], [bigint], "view">;

  endGame: TypedContractMethod<[], [void], "nonpayable">;

  factory: TypedContractMethod<[], [string], "view">;

  gameFee: TypedContractMethod<[], [bigint], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getPlayerRevealedState: TypedContractMethod<
    [_player: AddressLike],
    [bigint],
    "view"
  >;

  getPlayers: TypedContractMethod<[], [string[]], "view">;

  getPotentialWinners: TypedContractMethod<[], [string[]], "view">;

  id: TypedContractMethod<[], [bigint], "view">;

  initGame: TypedContractMethod<
    [
      _gameId: BigNumberish,
      _name: string,
      _minGuess: BigNumberish,
      _maxGuess: BigNumberish,
      _maxPlayers: BigNumberish,
      _betAmount: BigNumberish,
      _gameMaster: AddressLike,
      _gameFee: BigNumberish,
      _factory: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  joinGame: TypedContractMethod<[_guess: BytesLike], [void], "payable">;

  maxGuess: TypedContractMethod<[], [bigint], "view">;

  maxPlayers: TypedContractMethod<[], [bigint], "view">;

  minGuess: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  potentialWinners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  revealGuess: TypedContractMethod<
    [_guess: BigNumberish, _salt: string],
    [void],
    "nonpayable"
  >;

  startBettingRound: TypedContractMethod<[], [void], "nonpayable">;

  state: TypedContractMethod<[], [bigint], "view">;

  totalBetAmount: TypedContractMethod<[], [bigint], "view">;

  totalCollateralAmount: TypedContractMethod<[], [bigint], "view">;

  totalPlayers: TypedContractMethod<[], [bigint], "view">;

  winner: TypedContractMethod<[], [string], "view">;

  withdrawGameFees: TypedContractMethod<[], [void], "nonpayable">;

  withdrawPricepool: TypedContractMethod<
    [_winner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "betAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "closeBettingRound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collateralAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerRevealedState"
  ): TypedContractMethod<[_player: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPotentialWinners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(nameOrSignature: "id"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initGame"
  ): TypedContractMethod<
    [
      _gameId: BigNumberish,
      _name: string,
      _minGuess: BigNumberish,
      _maxGuess: BigNumberish,
      _maxPlayers: BigNumberish,
      _betAmount: BigNumberish,
      _gameMaster: AddressLike,
      _gameFee: BigNumberish,
      _factory: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[_guess: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "maxGuess"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minGuess"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "potentialWinners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "revealGuess"
  ): TypedContractMethod<
    [_guess: BigNumberish, _salt: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startBettingRound"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBetAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalCollateralAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "winner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawGameFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPricepool"
  ): TypedContractMethod<[_winner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BettingRoundClosed"
  ): TypedContractEvent<
    BettingRoundClosedEvent.InputTuple,
    BettingRoundClosedEvent.OutputTuple,
    BettingRoundClosedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDeposited"
  ): TypedContractEvent<
    CollateralDepositedEvent.InputTuple,
    CollateralDepositedEvent.OutputTuple,
    CollateralDepositedEvent.OutputObject
  >;
  getEvent(
    key: "FeeCollected"
  ): TypedContractEvent<
    FeeCollectedEvent.InputTuple,
    FeeCollectedEvent.OutputTuple,
    FeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRefunded"
  ): TypedContractEvent<
    PlayerRefundedEvent.InputTuple,
    PlayerRefundedEvent.OutputTuple,
    PlayerRefundedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerRevealedGuess"
  ): TypedContractEvent<
    PlayerRevealedGuessEvent.InputTuple,
    PlayerRevealedGuessEvent.OutputTuple,
    PlayerRevealedGuessEvent.OutputObject
  >;
  getEvent(
    key: "PrizeAwarded"
  ): TypedContractEvent<
    PrizeAwardedEvent.InputTuple,
    PrizeAwardedEvent.OutputTuple,
    PrizeAwardedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerSelected"
  ): TypedContractEvent<
    WinnerSelectedEvent.InputTuple,
    WinnerSelectedEvent.OutputTuple,
    WinnerSelectedEvent.OutputObject
  >;

  filters: {
    "BettingRoundClosed()": TypedContractEvent<
      BettingRoundClosedEvent.InputTuple,
      BettingRoundClosedEvent.OutputTuple,
      BettingRoundClosedEvent.OutputObject
    >;
    BettingRoundClosed: TypedContractEvent<
      BettingRoundClosedEvent.InputTuple,
      BettingRoundClosedEvent.OutputTuple,
      BettingRoundClosedEvent.OutputObject
    >;

    "CollateralDeposited(address,uint256)": TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;
    CollateralDeposited: TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;

    "FeeCollected(address,uint256)": TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;
    FeeCollected: TypedContractEvent<
      FeeCollectedEvent.InputTuple,
      FeeCollectedEvent.OutputTuple,
      FeeCollectedEvent.OutputObject
    >;

    "GameCreated(uint256)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameEnded()": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameStarted()": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "PlayerJoined(address,uint256)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;

    "PlayerRefunded(address,uint256)": TypedContractEvent<
      PlayerRefundedEvent.InputTuple,
      PlayerRefundedEvent.OutputTuple,
      PlayerRefundedEvent.OutputObject
    >;
    PlayerRefunded: TypedContractEvent<
      PlayerRefundedEvent.InputTuple,
      PlayerRefundedEvent.OutputTuple,
      PlayerRefundedEvent.OutputObject
    >;

    "PlayerRevealedGuess(address,uint256,string,uint8)": TypedContractEvent<
      PlayerRevealedGuessEvent.InputTuple,
      PlayerRevealedGuessEvent.OutputTuple,
      PlayerRevealedGuessEvent.OutputObject
    >;
    PlayerRevealedGuess: TypedContractEvent<
      PlayerRevealedGuessEvent.InputTuple,
      PlayerRevealedGuessEvent.OutputTuple,
      PlayerRevealedGuessEvent.OutputObject
    >;

    "PrizeAwarded(address,uint256,uint256)": TypedContractEvent<
      PrizeAwardedEvent.InputTuple,
      PrizeAwardedEvent.OutputTuple,
      PrizeAwardedEvent.OutputObject
    >;
    PrizeAwarded: TypedContractEvent<
      PrizeAwardedEvent.InputTuple,
      PrizeAwardedEvent.OutputTuple,
      PrizeAwardedEvent.OutputObject
    >;

    "WinnerSelected(address,uint256)": TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
    WinnerSelected: TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
  };
}
