/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AverageGameModule_AverageGameFactoryInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "createAverageGame"
      | "getGameMasterAt"
      | "getGameMasters"
      | "getGameProxies"
      | "getGameProxyAt"
      | "totalGames"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GameCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createAverageGame",
    values: [
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameMasterAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameMasters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameProxies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameProxyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGames",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createAverageGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameMasterAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameMasters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameProxies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameProxyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalGames", data: BytesLike): Result;
}

export namespace GameCreatedEvent {
  export type InputTuple = [gameCount: BigNumberish, gameAddress: AddressLike];
  export type OutputTuple = [gameCount: bigint, gameAddress: string];
  export interface OutputObject {
    gameCount: bigint;
    gameAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AverageGameModule_AverageGameFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AverageGameModule_AverageGameFactory;
  waitForDeployment(): Promise<this>;

  interface: AverageGameModule_AverageGameFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createAverageGame: TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _maxPlayers: BigNumberish,
      _betAmount: BigNumberish,
      _gameFee: BigNumberish,
      _icon: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getGameMasterAt: TypedContractMethod<
    [_index: BigNumberish],
    [string],
    "view"
  >;

  getGameMasters: TypedContractMethod<[], [string[]], "view">;

  getGameProxies: TypedContractMethod<[], [string[]], "view">;

  getGameProxyAt: TypedContractMethod<[_index: BigNumberish], [string], "view">;

  totalGames: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createAverageGame"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      _name: string,
      _maxPlayers: BigNumberish,
      _betAmount: BigNumberish,
      _gameFee: BigNumberish,
      _icon: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGameMasterAt"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getGameMasters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGameProxies"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGameProxyAt"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalGames"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;

  filters: {
    "GameCreated(uint256,address)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
  };
}
